@mixin box-shadow($shadow) {
    -webkit-box-shadow: $shadow;
    -moz-box-shadow: $shadow;
    box-shadow: $shadow;
}

@mixin clearfix {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

//(aula-logo, no-repeat left center, contain);
@mixin svg($name, $pngonly: false) {
    background-image: url(../images/#{$name}.png);
    background-repeat: no-repeat;

    @if $pngonly == false {
        .inlinesvg & {
            background-image: url(../svg/#{$name}.svg);
        }
    }
}

@mixin make_rounded_thumbnail($size) {
    @include rem(border-radius, ($size/2));
    @include rem(height, $size);
    @include rem(width, $size);
    background: $color-grey-light;

    img {
        width: 100%;
        height: auto;
    }
}

$rem-baseline: 16px !default;
$rem: true !default;
$rem-px-only: false !default;

@mixin rem-baseline($zoom: 100%) {
    font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
    $result: ();
    $separator: list-separator($values);

    @each $value in $values {
        $item: $value;
        @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
            $item: $value / 1rem * $rem-baseline;
        } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
            $item: $value / ($rem-baseline / 1rem);
        } @else if type-of($value) == "list" {
            $item: rem-convert($to, $value...);
        }
        $result: append($result, $item, $separator);
    }

    @return $result;
}

@function rem($values...) {
    @if $rem-px-only {
        @return rem-convert(px, $values...);
    } @else {
        @return rem-convert(rem, $values...);
    }
}

@mixin rem($properties, $values...) {
    @if type-of($properties) == "map" {
        @each $property in map-keys($properties) {
            @include rem($property, map-get($properties, $property));
        }
    } @else {
        @each $property in $properties {
            @if $rem or $rem-px-only {
                #{$property}: rem-convert(px, $values...);
            }
            @if not $rem-px-only {
                #{$property}: rem-convert(rem, $values...);
            }
        }
    }
}

.clearfix {
    &:after {
        content:"";
        display:block;
        clear:both;
    }
}

.hidden {
    display: none;
}

.is-not-responsive {
    [class*='col-'] {
        @media handheld, only screen and (max-width: 767px) {
            @include rem(padding-right, 20px);
            float: left;
            margin-bottom: 0;
            margin-top: 0;

            &.col-1-1 {
                width: 100%;
            }
            &.col-2-3, .col-8-12 {
                width: 66.66%;
            }

            &.col-1-2, &.col-6-12 {
                width: 50%;
            }

            &.col-1-3, &.col-4-12 {
                width: 33.33%;
            }

            &.col-1-4, &.col-3-12 {
                width: 25%;
            }

            &.col-1-5 {
                width: 20%;
            }

            &.col-1-6, &.col-2-12 {
                width: 16.667%;
            }

            &.col-1-7 {
                width: 14.28%;
            }

            &.col-1-8 {
                width: 12.5%;
            }

            &.col-1-9 {
                width: 11.1%;
            }

            &.col-1-10 {
                width: 10%;
            }

            &.col-1-11 {
                width: 9.09%;
            }

            &.col-1-12 {
                width: 8.33%
            }

            /* Layout Columns */

            &.col-11-12 {
                width: 91.66%
            }

            &.col-10-12 {
                width: 83.333%;
            }

            &.col-9-12 {
                width: 75%;
            }

            &.col-5-12 {
                width: 41.66%;
            }

            &.col-7-12 {
                width: 58.33%
            }
        }
    }

    .main-grid {
        padding: 0;
    }
}
